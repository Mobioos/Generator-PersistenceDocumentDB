<#@ include file="..\..\Base\Templates\Include.tt"#><#var _entityInfo = (EntityInfo)Model;#>
db.createCollection("<#=_entityInfo.Id.ToCamelCase()#>", {
    validator: {
        $jsonSchema: {
            bsonType: "object",
<#
    if(_entityInfo.GetProperties() !=null && _entityInfo.GetProperties().Count() > 0)
    {
     var isRequiredList = _entityInfo.GetProperties().Where(p => p.IsRequired == true);
      if(isRequiredList.Count() > 0)
      {
#>
            required:[
<#
        int count = isRequiredList.Count() -1;
        int counter = 0;
        foreach(PropertyInfo property in isRequiredList)
        {
            if(property.IsRequired)
            {
                if(count == counter)
            {
#>
                "<#=property.Id.ToCamelCase()#>"
<#
                }else{
#>
                "<#=property.Id.ToCamelCase()#>",
<#
                }
            }
                     counter++;
        }
#>
            ],
<#
            }
    }
    if(_entityInfo.GetProperties() !=null && _entityInfo.GetProperties().Count() > 0)
    {
#>
            properties:{
<#
        int count = _entityInfo.GetProperties().Count() -1;
        int counter = 0;
        foreach(PropertyInfo property in _entityInfo.GetProperties())
        {
#>
<#var propertyType = Helper.GetType(property.Type);#>
                <#=property.Id.ToCamelCase()#>: {
                    bsonType: "<#=propertyType#>",
<#
                if(property.Maximum > property.Minimum)
                {
                    if(propertyType == "int")
                    {
#>
                    minimum: <#=property.Minimum#>,
                    maximum: <#=property.Maximum#>
<#
                    }
                }
                if(count == counter)
                {
#>
                }
<#
              }else{
#>
                },
<#
                }
                     counter++;
        }
#>
            }
<#
    }
#>
        }
    }
})

